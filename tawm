#!/usr/bin/python2

import sys
from Xlib.display import Display
from Xlib import X, XK, Xatom

wm_name = 'tawm'
dpy = Display()
wids = []
root = dpy.screen().root
scr_w = dpy.screen().width_in_pixels
scr_h = dpy.screen().height_in_pixels
net_active_window = dpy.get_atom('_NET_ACTIVE_WINDOW')
net_client_list = dpy.get_atom('_NET_CLIENT_LIST')
net_supported = dpy.get_atom('_NET_SUPPORTED')
net_supporting_wm = dpy.get_atom('_NET_SUPPORTING_WM_CHECK')
net_wm_name = dpy.get_atom('_NET_WM_NAME')
btn_mask = X.ButtonPressMask | X.ButtonReleaseMask | X.PointerMotionMask
root.grab_button(1, X.Mod4Mask, 1, btn_mask, X.GrabModeAsync, X.GrabModeAsync, X.NONE, X.NONE)
root.grab_button(3, X.Mod4Mask, 1, btn_mask, X.GrabModeAsync, X.GrabModeAsync, X.NONE, X.NONE)
root.change_attributes(event_mask = X.SubstructureNotifyMask)
root.change_property(net_supported, Xatom.ATOM, 32, [net_supported, net_active_window, net_client_list],)
support_window = root.create_window(0, 0, 10, 10, 0, dpy.screen().root_depth)
support_window.change_property(net_wm_name, Xatom.STRING, 8, wm_name,)

for window in [root, support_window]:
    window.change_property(net_supporting_wm, Xatom.WINDOW, 32, [support_window.id],)

def exit(i):
    sys.exit()

def kill_window(i):
    wids[-1].destroy()

def move(i):
    g = wids[-1].get_geometry()
    wids[-1].configure(x=(0 if i in [0, 2] else scr_w // 2), y=(0 if i in [0, 1] else scr_h // 2),
            width=g.width, height=g.height)

def resize(i):
    g = wids[-1].get_geometry()
    wids[-1].configure(x=g.x, y=g.y,
            width=(scr_w // (2 if i in [0, 2] else 1)), height=(scr_h // (2 if i in [0, 1] else 1)))

def is_win_at(w, i):
    g = w.get_geometry()
    return g.x == (0 if i in [0, 2] else scr_w // 2) and g.y == (0 if i in [0, 1] else scr_h // 2)

def switch(i):
    for w in (wids if is_win_at(wids[-1], i) else reversed(wids)):
        if is_win_at(w, i):
            activate_window(w)
            break

def next_window(i):
    activate_window(wids[i if len(wids) > 1 else -1])

def activate_window(window):
    window.raise_window()
    window.set_input_focus(revert_to=X.RevertToNone, time=X.CurrentTime)
    try:
        wids.remove(window)
        wids.append(window)
    except ValueError:
        pass

bindings = {
    (X.Mod4Mask, XK.XK_Tab): (next_window, 0),
    (X.Mod4Mask | X.ShiftMask, XK.XK_Tab): (next_window, -2),
    (X.Mod4Mask, XK.XK_Escape): (kill_window, 0),
    (X.Mod4Mask | X.ShiftMask, XK.XK_Escape): (exit, 0)
}
for i, k in enumerate(["q", "w", "a", "s"]):
    xk = XK.string_to_keysym(sys.argv[i + 1] if len(sys.argv) == 5 else k)
    bindings[(X.Mod4Mask, xk)] = (switch, i)
    bindings[(X.Mod4Mask | X.ShiftMask, xk)] = (move, i)
    bindings[(X.Mod4Mask | X.ControlMask, xk)] = (resize, i)

for key in bindings.keys():
    root.grab_key(dpy.keysym_to_keycode(key[1]), key[0], 1, X.GrabModeAsync, X.GrabModeAsync)

while 1:
    ev = dpy.next_event()
    if ev.type == X.MapNotify:
        wids.append(ev.window)
        activate_window(ev.window)
    elif ev.type == X.UnmapNotify:
        try:
            wids.remove(ev.window)
        except ValueError:
            pass
        if wids:
            activate_window(wids[-1])
        else:
            dpy.set_input_focus(root, X.RevertToPointerRoot, X.CurrentTime)
    elif ev.type == X.MapRequest:
        ev.window.map()
    elif ev.type == X.CirculateRequest:
        ev.window.circulate(ev.place)
    elif ev.type == X.ClientMessage and ev.client_type == net_active_window:
        activate_window(ev.window)
    elif ev.type == X.ButtonPress and ev.child != X.NONE:
        geom = ev.child.get_geometry()
        mouse_ev = ev
    elif ev.type == X.MotionNotify and mouse_ev:
        dx = ev.root_x - mouse_ev.root_x
        dy = ev.root_y - mouse_ev.root_y
        mouse_ev.child.configure(
            x=(geom.x + (dx if mouse_ev.detail == 1 else 0)),
            y=(geom.y + (dy if mouse_ev.detail == 1 else 0)),
            width=max(1, geom.width + (dx if mouse_ev.detail == 3 else 0)),
            height=max(1, geom.height + (dy if mouse_ev.detail == 3 else 0)))
    elif ev.type == X.ButtonRelease:
        mouse_ev = None
    elif ev.type == X.KeyPress and wids:
        handler = bindings.get((ev.state, dpy.keycode_to_keysym(ev.detail, 0)))
        handler[0](handler[1])

    root.change_property(net_client_list, Xatom.WINDOW, 32, [w.id for w in wids],)
    root.change_property(net_active_window, Xatom.WINDOW, 32, [wids[-1].id] if wids else [X.NONE],)
